# Generated by Django 4.2.2 on 2023-07-01 19:03

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bio', models.TextField(blank=True, max_length=1000)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField(default=dict)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'attendees',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hardware',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('image', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('building', models.CharField(choices=[], max_length=2)),
                ('room', models.CharField(choices=[('MH', 'Main Hall'), ('AT', 'Atlantis')], default='MH', max_length=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='infrastructure.location')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('table', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='infrastructure.table')),
            ],
        ),
        migrations.CreateModel(
            name='SkillProficiency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('proficiency', models.CharField(choices=[('N', 'Novice'), ('C', 'Competent'), ('P', 'Proficient'), ('M', 'Master')], default='N', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infrastructure.skill')),
            ],
            options={
                'verbose_name': 'skill proficiencies',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('repository_location', models.URLField()),
                ('submission_location', models.URLField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='infrastructure.team')),
            ],
        ),
        migrations.CreateModel(
            name='HelpDesk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('announcement_pending', models.BooleanField(default=False)),
                ('mentor_requested', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infrastructure.table')),
            ],
        ),
        migrations.CreateModel(
            name='HardwareDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('serial', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checked_out_to', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hardware', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='infrastructure.hardware')),
            ],
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['name'], name='infrastruct_name_661d0f_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['table'], name='infrastruct_table_i_c8f6ee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='skillproficiency',
            unique_together={('attendee', 'skill')},
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['last_name', 'first_name'], name='infrastruct_last_na_029e47_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['first_name'], name='infrastruct_first_n_5c1abd_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['last_name'], name='infrastruct_last_na_46c1a5_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['username'], name='infrastruct_usernam_0bcdcc_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['email'], name='infrastruct_email_a899f3_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['is_staff'], name='infrastruct_is_staf_9a7229_idx'),
        ),
        migrations.AddIndex(
            model_name='attendee',
            index=models.Index(fields=['metadata'], name='infrastruct_metadat_bc35e8_idx'),
        ),
    ]
